name: Tests

on: [push, pull_request]

jobs:
  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "3.8", python: "3.8", os: ubuntu-latest, tox: py38 }

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Update pip
        run: |
          python -m pip install -U pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(python -m pip cache dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip|${{ runner.os }}|${{ matrix.python }}|${{ hashFiles('setup.cfg') }}
      - name: set full Python version in PY env var
        # See https://pre-commit.com/#github-actions-example
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - run: python -m pip install tox
      - run: python -m tox -e ${{ matrix.tox }}

  verify_docker_build:
    name: Always - Docker verify, push to tag 'master' if on master
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # PR build doesnt get proper version, so dont try to build it
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker/login-action@v1
        if: github.repository_owner == 'locustio'
        with:
          username: locustbuild
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: build and publish image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/master' && github.repository_owner == 'locustio' }}
          tags: locustio/locust:master

  docker_tagged:
    name: Tagged - Docker push to tag based on git tag. Also push 'latest' if on master
    needs: tests
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags') && github.repository_owner == 'locustio'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo "TAG=${GITHUB_REF#refs/*/}" | tee -a $GITHUB_ENV
      - run: echo "BRANCH=$(git branch -a --contains ${{ env.TAG }} | grep -v HEAD | cut -d '/' -f3)" | tee -a $GITHUB_ENV
      - uses: docker/login-action@v1
        with:
          username: locustbuild
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: build and publish image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: locustio/locust:${{ env.TAG }}${{ ( env.BRANCH == 'master' && ',locustio/locust:latest') || '' }}

  publish:
    name: PyPI - Publish if this is a tagged commit
    needs: [verify_docker_build, tests]
    if: startsWith(github.event.ref, 'refs/tags') && github.repository_owner == 'locustio'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build
      - name: Build + set TAG env var for later use
        run: |
          python -m build
          echo "TAG=${GITHUB_REF#refs/*/}" | tee -a $GITHUB_ENV
      - name: Publish tagged version to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
      - name: Tweet on release
        uses: infraway/tweet-action@v1.0.1
        with:
          status: "New release: ${{ env.TAG }} https://github.com/locustio/locust/releases/tag/${{ env.TAG }}"
          api_key: ${{ secrets.TWITTER_API_CONSUMER_KEY }}
          api_key_secret: ${{ secrets.TWITTER_API_CONSUMER_SECRET }}
          access_token: ${{ secrets.TWITTER_API_ACCESS_TOKEN_KEY }}
          access_token_secret: ${{ secrets.TWITTER_API_ACCESS_TOKEN_SECRET }}

  publish_prerelease:
    name: PyPI - Publish prerelease on merge commit on master
    needs: tests
    if: github.ref == 'refs/heads/master' && github.repository_owner == 'locustio'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - run: git rev-parse HEAD^2 2>/dev/null >/dev/null || echo NOT_MERGE_COMMIT=1 | tee -a $GITHUB_ENV
      - name: Install dependencies
        if: ${{ env.NOT_MERGE_COMMIT == '' }}
        run: |
          python -m pip install --upgrade pip build
      - name: Build
        if: ${{ env.NOT_MERGE_COMMIT == '' }}
        run: |
          python -m build
      - name: Publish prerelease version to PyPI
        if: ${{ env.NOT_MERGE_COMMIT == '' }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true


  test-aarch64:
    name: aarch64_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Arm64 test case
      run: |
           docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
           arm64v8/ubuntu:latest \
           bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl git && \
           uname -m && \
              python3 -m pip install --upgrade pip && \
              python3 --version && \
              uname -m && \
              apt-get install -y libpq-dev python3-dev && \
              pip3 install -U wheel setuptools pip && \
              pip3 install tox codecov && \
              pip3 install -r docs/requirements.txt && \
              python3 setup.py install && \
              pip3 install -e locust/     && \
              python3 -m pip install tox coverage gevent && \
              pip3 install -U --pre locust && \
              pip3 install locust && \
              apt-get install -y python3-gevent python3-gevent-websocket && \
              python3 -m tox -e py38'
              
              
#apt-get install -y libssl-dev zlib1g-dev gcc g++ make && \
#git clone https://github.com/edenhill/librdkafka && \
#cd librdkafka && \
#./configure --prefix=/usr && \
#make && \
#make install && \
#cd .. && \
#uname -m && \
